<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.dygstudio.group</groupId>
    <artifactId>parent</artifactId>
    <version>0.1</version>
    <packaging>pom</packaging>

    <modules>
        <module>spring-boot-hello</module>
        <module>eureka-server</module>
        <module>ribbon-consumer</module>
        <module>microservice-provider-user</module>
        <module>feign-consumer</module>
        <module>hystrix-dashboard-server</module>
        <module>hystrix-turbine-server</module>
        <module>zuul-server</module>
        <module>microservice-file-upload</module>
        <module>config-server</module>
        <module>db-model</module>
    </modules>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.5.RELEASE</version>
    </parent>
    <!-- DepencyManagement：通过它元素来管理jar包的版本，让子项目中引用一个依赖而不用显示的列出版本号。
    Maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用在这个dependencyManagement元素中指定的版本号。
    统一管理项目的版本号，确保应用的各个项目的依赖和版本一致，才能保证测试的和发布的是相同的成果，因此，在顶层pom中定义共同的依赖关系。
    dependencies即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）。
    dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。
    如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;
    另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Camden.SR7</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>